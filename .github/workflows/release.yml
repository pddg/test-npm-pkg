name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  create-gh-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false
  npm_publish:
    name: Publish package to npmjs
    runs-on: ubuntu-latest
    environment: npmjs
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '14'
          registry-url: 'https://registry.npmjs.org'
          scope: '@pddg'
      - uses: actions/cache@v2
        id: node_modules_cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencied
        if: steps.node_modules_cache.outputs.cache-hit != 'true'
        run: |
          npm ci
      - name: Run npm publish (npmjs)
        run: |
          if npx can-npm-publish
          then
            echo "Try to publish package..."
            npm publish
          else
            VERSION=v$(jq -r ".version" package.json)
            echo "$(VERSION) already exists. Skipped."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
      - uses: actions/setup-node@v1
        with:
          registry-url: 'https://npm.pkg.github.com'
          scope: "@pddg"
      - name: Run npm publish (GitHub Package Registry)
        run: |
          if npx can-npm-publish
          then
            echo "Try to publish package..."
            npm publish
          else
            VERSION=v$(jq -r ".version" package.json)
            echo "$(VERSION) already exists. Skipped."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
